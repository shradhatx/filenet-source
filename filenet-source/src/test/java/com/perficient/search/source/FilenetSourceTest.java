package com.perficient.search.source;

import java.util.HashMap;

import org.apache.commons.collections4.MapUtils;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

class FilenetSourceTest {
   private static final Logger log = LoggerFactory.getLogger(FilenetSourceTest.class);

   @BeforeAll
   static void initAll() {
   }

   @Test
   void testGetContent() throws Exception {
      final FilenetSource source = new FilenetSource();

      source.init(MapUtils.putAll(new HashMap<String, Object>(), new String[] {
         "ceurl", "https://case.bpm.prftdata.com/wsi/FNCEWS40MTOM",
         "username", "icm.admin",
         "password", "One Perficient!",
         "objectstore", "OS1",
         "sql",
         "select top 100 ${ID}, ${DATE_CREATED}, ${DATE_LAST_MODIFIED} from Document where ${VERSION_STATUS}=1 and ${CONTENT_SIZE} is not null and (not Document.This insubfolder '/Trash') order by ${DATE_CREATED}"
      }));

      byte[] checkpoint = new byte[] {-84, -19, 0, 5, 119, 8, 3, 2, 0, 0, 0, 10, 0, 2, 115, 114, 0, 42, 99, 111, 109, 46, 102, 105, 108, 101, 110, 101, 116, 46, 97, 112, 105, 105, 109, 112, 108, 46, 113, 117, 101, 114, 121, 46, 82, 101, 112, 111, 115, 105, 116, 111, 114, 121, 83, 101, 97, 114, 99, 104, -84, 97, -83, 85, -56, 108, 116, -48, 3, 0, 1, 76, 0, 9, 115, 101, 97, 114, 99, 104, 83, 81, 76, 116, 0, 18, 76, 106, 97, 118, 97, 47, 108, 97, 110, 103, 47, 83, 116, 114, 105, 110, 103, 59, 120, 114, 0, 32, 99, 111, 109, 46, 102, 105, 108, 101, 110, 101, 116, 46, 97, 112, 105, 105, 109, 112, 108, 46, 113, 117, 101, 114, 121, 46, 83, 101, 97, 114, 99, 104, 29, -26, -117, -17, -70, -31, -4, -44, 3, 0, 1, 76, 0, 14, 112, 114, 111, 112, 101, 114, 116, 121, 70, 105, 108, 116, 101, 114, 116, 0, 41, 76, 99, 111, 109, 47, 102, 105, 108, 101, 110, 101, 116, 47, 97, 112, 105, 47, 112, 114, 111, 112, 101, 114, 116, 121, 47, 80, 114, 111, 112, 101, 114, 116, 121, 70, 105, 108, 116, 101, 114, 59, 120, 112, 112, 120, 116, 0, -78, 115, 101, 108, 101, 99, 116, 32, 116, 111, 112, 32, 49, 48, 48, 32, 73, 100, 44, 32, 68, 97, 116, 101, 67, 114, 101, 97, 116, 101, 100, 44, 32, 68, 97, 116, 101, 76, 97, 115, 116, 77, 111, 100, 105, 102, 105, 101, 100, 32, 102, 114, 111, 109, 32, 68, 111, 99, 117, 109, 101, 110, 116, 32, 119, 104, 101, 114, 101, 32, 86, 101, 114, 115, 105, 111, 110, 83, 116, 97, 116, 117, 115, 61, 49, 32, 97, 110, 100, 32, 67, 111, 110, 116, 101, 110, 116, 83, 105, 122, 101, 32, 105, 115, 32, 110, 111, 116, 32, 110, 117, 108, 108, 32, 97, 110, 100, 32, 40, 110, 111, 116, 32, 68, 111, 99, 117, 109, 101, 110, 116, 46, 84, 104, 105, 115, 32, 105, 110, 115, 117, 98, 102, 111, 108, 100, 101, 114, 32, 39, 47, 84, 114, 97, 115, 104, 39, 41, 32, 111, 114, 100, 101, 114, 32, 98, 121, 32, 68, 97, 116, 101, 67, 114, 101, 97, 116, 101, 100, 120, 119, 11, 0, 0, 0, 10, 1, 0, 0, 0, 1, 2, 4, 116, 0, 11, 79, 98, 106, 101, 99, 116, 83, 116, 111, 114, 101, 117, 114, 0, 2, 91, 66, -84, -13, 23, -8, 6, 8, 84, -32, 2, 0, 0, 120, 112, 0, 0, 0, 16, -30, 55, -119, -71, -81, -16, 66, 71, -99, 12, -6, -110, -104, 25, -73, 55};

      source.getContent(checkpoint);
   }
}
